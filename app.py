import streamlit as st 
from dotenv import load_dotenv
import os 
import openai
import base64
# from diffusers import StableDiffusionPipeline
# import torch

import io
from PIL import Image
from clarifai.client.model import Model

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
os.environ['CLARIFAI_PAT'] = os.getenv("CLARIFAI_PAT")

# Function to set page background image
def get_base64_of_bin_file(bin_file):
    """
    This function reads a binary file and converts its content into a base64 encoded string.

    Arguments:
    bin_file: A string representing the path to the binary file to be read.

    Returns:
    A string representing the base64 encoded content of the binary file.

    Raises:
    FileNotFoundError: If the specified binary file does not exist.
    """
    with open(bin_file, 'rb') as f:
        data = f.read()
    return base64.b64encode(data).decode()

def set_page_background(png_file):
    """
    Description:
    Sets the background of a page using a PNG file.

    Arguments:
    png_file (str): Path to the PNG file that will be used as the background image.

    Returns:
    None

    Raises:
    No exceptions are raised by this function.
    """
    bin_str = get_base64_of_bin_file(png_file)
    page_bg_img = f'''
        <style>
        .stApp {{
            background-image: url("data:image/png;base64,{bin_str}");
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: scroll;
        }}
        </style>
    '''
    st.markdown(page_bg_img, unsafe_allow_html=True)

# STREAMLIT APP
st.set_page_config(
    page_title="insAIghts INTELLIGENCE",
    page_icon="assets/logo-color.png",
    layout="wide"
)

# Hide Streamlit's default menu and footer
hide_streamlit_style = """
<style>
#MainMenu {visibility: hidden;}
footer {visibility: hidden;}
</style>
"""
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# Set page background
set_page_background("assets/Volkswagen_logo_2019.svg")

#function to generate AI based images using OpenAI Dall-E
def generate_images_using_openai(text):
    response = openai.Image.create(prompt= text, n=1, size="512x512")
    image_url = response['data'][0]['url']
    return image_url


#function to generate AI based images using Huggingface Diffusers
# def generate_images_using_huggingface_diffusers(text):
#     pipe = StableDiffusionPipeline.from_pretrained("runwayml/stable-diffusion-v1-5", torch_dtype=torch.float16)
#     pipe = pipe.to("cuda")
#     prompt = text
#     image = pipe(prompt).images[0] 
#     return image

def generate_images_using_clarifai(prompt):
    model = Model("https://clarifai.com/segmind/segmind-stable-diffusion/models/ssd-1b")
    model_prediction = model.predict_by_bytes(prompt.encode(), "text")
    image_bytes = model_prediction.outputs[0].data.image.base64
    imageStream = io.BytesIO(image_bytes)
    imageFile = Image.open(imageStream)
    return imageFile


#Streamlit Code
choice = st.sidebar.selectbox("Select your choice", ["Home", "DALL-E", "Huggingface Diffusers", "Clarifai"])

if choice == "Home":
    st.title("AI Image Generation App")
    with st.expander("About the App"):
        st.write("This is a simple image generation app that uses AI to generates images from text prompt.")

elif choice == "DALL-E":
    st.subheader("Image generation using Open AI's DALL-E")
    input_prompt = st.text_input("Enter your text prompt")
    if input_prompt is not None:
        if st.button("Generate Image"):
            image_url = generate_images_using_openai(input_prompt)
            st.image(image_url, caption="Generated by DALL-E")

# elif choice == "Huggingface Diffusers":
#     st.subheader("Image generation using Huggingface Diffusers")
#     input_prompt = st.text_input("Enter your text prompt")
#     if input_prompt is not None:
#         if st.button("Generate Image"):
#             image_output = generate_images_using_huggingface_diffusers(input_prompt)
#             st.info("Generating image.....")
#             st.success("Image Generated Successfully")
#             st.image(image_output, caption="Generated by Huggingface Diffusers")

elif choice=="Clarifai":
    st.subheader("Image generation using Clarifai")
    input_prompt = st.text_input("Enter your text prompt")
    if input_prompt is not None:
        if st.button("Generate Image"):
            image_output = generate_images_using_clarifai(input_prompt)
            st.info("Generating image.....")
            st.success("Image Generated Successfully")
            st.image(image_output, caption="Generated by Clarifai", use_column_width=True)
          
